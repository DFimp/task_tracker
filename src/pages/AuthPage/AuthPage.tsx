import React, { useState } from 'react';
import { useAuth } from '../../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import styles from './AuthPage.module.css';

const AuthPage: React.FC = () => {
  const { login } = useAuth();
  const navigate = useNavigate();
  const [isLogin, setIsLogin] = useState(true);

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [passwordError, setPasswordError] = useState('');

  const validatePassword = (pwd: string): boolean => {
    const hasMinLength = pwd.length >= 6;
    const uppercaseCount = (pwd.match(/[A-Z]/g) || []).length;
    const hasSpecialChar = /[^A-Za-z0-9]/.test(pwd);
    return hasMinLength && uppercaseCount >= 2 && hasSpecialChar;
  };

  const handleLogin = () => {
    if (isLogin) {
      login();
      navigate('/tasks');
    } else {
      if (!validatePassword(password)) {
        setPasswordError(
          '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª.'
        );
        return;
      }
      // –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...');
      login(); // –≤—Ä–µ–º–µ–Ω–Ω–æ —Ç–∞–∫
      navigate('/tasks');
    }
  };

  const toggleAuthMode = () => {
    setIsLogin(prev => !prev);
    setPasswordError('');
  };

  const togglePasswordVisibility = () => {
    setShowPassword(prev => !prev);
  };

  const handleResetPassword = () => {
    // –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    console.log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è...');
    // –Ω–∞–ø—Ä–∏–º–µ—Ä, navigate('/reset-password');
  };

  return (
    <div className={styles.authPage}>
      <div className={styles.authPage__wrapperForm}>
        <h2 className={styles.form__title}>{isLogin ? '–í—Ö–æ–¥' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}</h2>
        
          <form className={styles.authPage__form}>
            <span className={styles.form__text}>Email</span>
            <input
              type="email"
              value={email}
              onChange={e => setEmail(e.target.value)}
              required
            />
            <span className={styles.form__text}>–ü–∞—Ä–æ–ª—å</span>
            <div className={styles.passwordWrapper}>
              <input
                type={showPassword ? 'text' : 'password'}
                value={password}
                onChange={e => setPassword(e.target.value)}
                required
              />
              <span className={styles.eyeIcon} onClick={togglePasswordVisibility}>
                {showPassword ? 'üôà' : 'üëÅÔ∏è'}
              </span>
            </div>

            {passwordError && <p className={styles.errorText}>{passwordError}</p>}


            {isLogin && (
              <span
                className={styles.linkText}
                onClick={handleResetPassword}
              >
                –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å
              </span>
            )}

          </form>
        
        <button onClick={handleLogin}>{isLogin ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}</button>
        
        <div className={styles.wrapperForm__text}>
          {isLogin ? '–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ ' : '–ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, '}
          <span className={styles.linkText} onClick={toggleAuthMode}>
            {isLogin ? '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é' : '–≤–æ–π–¥–∏—Ç–µ'}
          </span>
        </div>

      </div>
    </div>
  );
};

export default AuthPage;
