import React, { useState } from "react";
import { useAuth } from "../../context/AuthContext";
import { useNavigate } from "react-router-dom";
import styles from "./AuthPage.module.css";

const BASE_URL = process.env.REACT_APP_BASE_URL;

const AuthPage: React.FC = () => {
  const { login } = useAuth();
  const navigate = useNavigate();
  const [isLogin, setIsLogin] = useState(true);

  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [passwordError, setPasswordError] = useState("");

  const [isResetPassword, setIsResetPassword] = useState(false);
  const [resetMessage, setResetMessage] = useState("");

  const validatePassword = (pwd: string): boolean => {
    const hasMinLength = pwd.length >= 6;
    const uppercaseCount = (pwd.match(/[A-Z]/g) || []).length;
    const hasSpecialChar = /[!@#$%^&*()]/.test(pwd);
    return hasMinLength && uppercaseCount >= 2 && hasSpecialChar;
  };

  const handleLogin = async () => {
    if (!email || !password) return;

    if (isLogin) {
      // –õ–æ–≥–∏–Ω
      try {
        const response = await fetch(`${BASE_URL}/api/user/login`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ email, password }),
          credentials: "include",
        });

        if (!response.ok) {
          throw new Error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.");
        }

        const data = await response.json();
        console.log("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:", data);

        login(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        navigate("/tasks");
      } catch (error) {
        console.error(error);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å.");
      }
    } else {
      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
      if (!validatePassword(password)) {
        setPasswordError(
          "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª(!@#$%^&*())."
        );
        return;
      }

      try {
        const response = await fetch(`${BASE_URL}/api/user/register`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ email, password }),
          credentials: "include",
        });

        if (!response.ok) {
          throw new Error(
            "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."
          );
        }

        const data = await response.json();
        console.log("–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:", data);

        login(); // –°—Ä–∞–∑—É –ª–æ–≥–∏–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        navigate("/tasks");
      } catch (error) {
        console.error(error);
        alert("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.");
      }
    }
  };

  const toggleAuthMode = () => {
    setIsLogin((prev) => !prev);
    setPasswordError("");
  };

  const togglePasswordVisibility = () => {
    setShowPassword((prev) => !prev);
  };

  const handleResetPassword = async () => {
    if (!email) {
      alert("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è");
      return;
    }

    try {
      const response = await fetch(`${BASE_URL}/api/user/reset_password`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ email }),
      });

      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è.");
      }

      setIsResetPassword(true);
      setResetMessage("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à email.");
    } catch (error) {
      console.error(error);
      setResetMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  };

  return (
    <div className={styles.authPage}>
      <div className={styles.authPage__wrapperForm}>
        <h2 className={styles.form__title}>
          {isLogin ? "–í—Ö–æ–¥" : "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"}
        </h2>

        <form className={styles.authPage__form}>
          <span className={styles.form__text}>Email</span>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
          <span className={styles.form__text}>–ü–∞—Ä–æ–ª—å</span>
          <div className={styles.passwordWrapper}>
            <input
              type={showPassword ? "text" : "password"}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
            <span className={styles.eyeIcon} onClick={togglePasswordVisibility}>
              {showPassword ? "üôà" : "üëÅÔ∏è"}
            </span>
          </div>

          {passwordError && <p className={styles.errorText}>{passwordError}</p>}

          {isLogin && !isResetPassword && (
            <span className={styles.linkText} onClick={handleResetPassword}>
              –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å
            </span>
          )}

          {resetMessage && <p className={styles.successText}>{resetMessage}</p>}
        </form>

        <button className={styles.form__button} onClick={handleLogin}>
          {isLogin ? "–í–æ–π—Ç–∏" : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
        </button>

        <div className={styles.wrapperForm__text}>
          {isLogin
            ? "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ "
            : "–ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, "}
          <span className={styles.linkText} onClick={toggleAuthMode}>
            {isLogin ? "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é" : "–≤–æ–π–¥–∏—Ç–µ"}
          </span>
        </div>
      </div>
    </div>
  );
};

export default AuthPage;
